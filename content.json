[{"title":"MVVM和Vue.js","date":"2016-09-10T15:57:52.000Z","path":"2016/09/10/MVVM和Vue-js/","text":"MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。 Vue.js 是一个提供了 MVVM 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。 ViewModel负责连接 View 和 Model，保证视图和数据的一致性，这种轻量级的架构让前端开发更加高效、便捷。 为什么会出现 MVVM 呢？ 我接触MVVM 是在2015年，可以说2015年是MVVM 最火热的一年，而在这之前，我所知道的就是MVC, MVC 大约是在5年前，也就是2011年的时候接触的，那时候刚学编程语言，学的Java，而Java 中经典的 SSH 框架就用来构建一个标准的MVC 框架。说实话，MVC 用了这么多年，但始终没有很深刻的理解，只停留在用的层面， 一直到接触 Vue.js 之后，研究了MVVM 架构思想，然后再回头看 MVC ，才有一种豁然开朗的感觉~ MVC 即 Model-View-Controller 的缩写，就是 模型-视图-控制器 , 也就是说一个标准的Web 应用程式是由这三部分组成的： View 用来把数据以某种方式呈现给用户 Model 其实就是数据 Controller 接收并处理来自用户的请求，并将 Model 返回给用户 在HTML5 还未火起来的那些年，MVC 作为Web 应用的最佳实践是OK 的，这是因为 Web 应用的View 层相对来说比较简单，前端所需要的数据在后端基本上都可以处理好，View 层主要是做一下展示，那时候提倡的是 Controller 来处理复杂的业务逻辑，所以View 层相对来说比较轻量，就是所谓的瘦客户端思想。 2010年到2011年，HTML5概念被热炒，受到追捧，2012年，W3C 正式宣布HTML5规范已经正式定稿。2013年我刚进公司就接触了第一个 HTML5 框架Sench touch, 它是一款用来构建移动应用的HTML5 框架，它将前后端彻底分离，前端采用MVC 架构，作为一个独立的项目工程来维护。 为什么前端要工程化，要是使用MVC？ 相对 HTML4 , HTML5 最大的亮点是它为移动设备提供了一些非常有用的功能，使得 HTML5 具备了开发App的能力, HTML5开发App 最大的好处就是跨平台、快速迭代和上线，节省人力成本和提高效率，因此很多企业开始对传统的App进行改造，逐渐用H5代替Native，到2015年的时候，市面上大多数App 或多或少嵌入都了H5 的页面。 既然要用H5 来构建 App, 那View 层所做的事，就不仅仅是简单的数据展示了，它不仅要管理复杂的数据状态，还要处理移动设备上各种操作行为等等。因此，前端也需要工程化，也需要一个类似于MVC 的框架来管理这些复杂的逻辑，使开发更加高效。 但这里的 MVC 又稍微发了点变化： View UI布局，展示数据 Model 管理数据 Controller 响应用户操作，并将 Model 更新到 View 上 这种 MVC 架构模式对于简单的应用来看起是OK 的，也符合软件架构的分层思想。 但实际上，随着H5 的不断发展，人们更希望使用H5 开发的应用能和Native 媲美，或者接近于原生App 的体验效果，于是前端应用的复杂程度已不同往日，今非昔比。这时前端开发就暴露出了三个痛点问题： 开发者在代码中大量调用相同的 DOM API, 处理繁琐 ，操作冗余，使得代码难以维护。 大量的DOM 操作使页面渲染性能降低，加载速度变慢，影响用户体验。 当 Model 频繁发生变化，开发者需要主动更新到View ；当用户的操作导致 Model 发生变化，开发者同样需要将变化的数据同步到Model 中， 这样的工作不仅繁琐，而且很难维护复杂多变的数据状态。 其实，早期jquery 的出现就是为了前端能更简洁的操作DOM 而设计的，但它只解决了第一个问题，另外两个问题始终伴随着前端一直存在。 MVVM 的出现，完美解决了以上三个问题。 MVVM 由 Model,View,ViewModel 三部分构成，Model 层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；View 代表UI 组件，它负责将数据模型转化成UI 展现出来，ViewModel 是一个同步View 和 Model的对象。 在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。 ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。 Vue.js 的细节 Vue.js 可以说是MVVM 架构的最佳实践，专注于 MVVM 中的 ViewModel，不仅做到了数据双向绑定，而且也是一款相对来比较轻量级的JS 库，API 简洁，很容易上手。Vue的基础知识网上有现成的教程，此处不再赘述， 下面简单了解一下 Vue.js 关于双向绑定的一些实现细节： Vue.js 是采用 Object.defineProperty 的 getter 和 setter，并结合观察者模式来实现数据绑定的。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。 Observer 数据监听器，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者，内部采用Object.defineProperty的getter和setter来实现 Compile 指令解析器，它的作用对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数 Watcher 订阅者， 作为连接 Observer 和 Compile 的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数 Dep 消息订阅器，内部维护了一个数组，用来收集订阅者（Watcher），数据变动触发notify 函数，再调用订阅者的update 方法 从图中可以看出，当执行 new Vue() 时，Vue 就进入了初始化阶段，一方面Vue 会遍历 data 选项中的属性，并用 Object.defineProperty 将它们转为 getter/setter，实现数据变化监听功能；另一方面，Vue 的指令编译器Compile 对元素节点的指令进行扫描和解析，初始化视图，并订阅Watcher 来更新视图， 此时Wather 会将自己添加到消息订阅器中(Dep),初始化完毕。 当数据发生变化时，Observer 中的 setter 方法被触发，setter 会立即调用Dep.notify()，Dep 开始遍历所有的订阅者，并调用订阅者的 update 方法，订阅者收到通知后对视图进行相应的更新。","tags":[{"name":"MVVM","slug":"MVVM","permalink":"http://yoursite.com/tags/MVVM/"}]},{"title":"node.js的一些小知识","date":"2016-07-20T12:54:48.000Z","path":"2016/07/20/node-js的一些小知识/","text":"querystring:可以用作通用解析器的模块很多时候我们会从数据库或其他地方得到这种奇怪格式的字符串:name:Sophie;shape:fox;condition:new，一般来说我们会利用字符串切割的方式来讲字符串划分到JavaScript Object。不过querystring也是个不错的现成的工具: const weirdoString = name:Sophie;shape:fox;condition:new; const result = querystring.parse(weirdoString, ;, :); // result: // { // name: Sophie, // shape: fox, // condition: new, // }; V8 Inspector以--inspect参数运行你的Node应用程序，它会反馈你某个URL。将该URL复制到Chrome中并打开，你就可以使用Chrome DevTools来调试你的Node应用程序啦。详细的实验可以参考这篇文章。不过需要注意的是，该参数仍然属于实验性质 nextTick 与 setImmediate的区别这两货的区别可能光从名字上还看不出来，我觉得应该给它们取个别名: process.nextTick()应该为process.sendThisToTheStartOfTheQueue() setImmediate应该为sendThisToTheEndOfTheQueue() 再说句不相关的，React中的Props应该为stuffThatShouldStayTheSameIfTheUserRefreshes，而State应该为stuffThatShouldBeForgottenIfTheUserRefreshes。 Server.listen 可以使用Object作为参数我更喜欢命名参数的方式调用函数，这样相较于仅按照顺序的无命名参数法会更直观。别忘了Server.listen也可以使用某个Object作为参数: require(http) .createServer() .listen({ port: 8080, host: `localhost`, }) .on(request, (req, res) =&gt; { res.end(`Hello World!`); }); 不过这个特性不是表述在http.Server这个API中，而是在其父级net.Server的文档中。 相对地址你传入fs模块的距离可以是相对地址，即相对于process.cwd()。估计有些人早就知道了，不过我之前一直以为是只能使用绝对地址: const fs = require(fs); const path = require(path); // why have I always done this… fs.readFile(path.join(__dirname, myFile.txt), (err, data) =&gt; { // do something }); // when I could just do this? fs.readFile(./path/to/myFile.txt, (err, data) =&gt; { // do something }); Path Parsing:路径解析之前我一直不知道的某个功能就是从某个文件名中解析出路径，文件名，文件扩展等等: myFilePath = /someDir/someFile.json; path.parse(myFilePath).base === someFile.json; // true path.parse(myFilePath).name === someFile; // true path.parse(myFilePath).ext === .json; // true Logging with colors别忘了console.dir(obj,{colors:true})能够以不同的色彩打印出键与值，这一点会大大增加日志的可读性。 使用setInterval执行定时任务我喜欢使用setInterval来定期执行数据库清理任务，不过默认情况下在存在setInterval的时候NodeJS并不会退出，你可以使用如下的方法让Node沉睡: const dailyCleanup = setInterval(() =&gt; { cleanup(); }, 1000 60 60 * 24); dailyCleanup.unref(); Use Signal Constants如果你尝试在NodeJS中杀死某个进程，估计你用过如下语法: process.kill(process.pid, SIGTERM); 这个没啥问题，不过既然第二个参数同时能够使用字符串与整形变量，那么还不如使用全局变量呢: process.kill(process.pid, os.constants.signals.SIGTERM); IP Address ValidationNodeJS中含有内置的IP地址校验工具，这一点可以免得你写额外的正则表达式: require(net).isIP(10.0.0.1) 返回 4 require(net).isIP(cats) 返回 0 os.EOF不知道你有没有手写过行结束符，看上去可不漂亮啊。NodeJS内置了os.EOF，其在Windows下是rn，其他地方是n，使用os.EOL能够让你的代码在不同的操作系统上保证一致性: const fs = require(fs); // bad fs.readFile(./myFile.txt, utf8, (err, data) =&gt; { data.split(\\r\\n).forEach(line =&gt; { // do something }); }); // good const os = require(os); fs.readFile(./myFile.txt, utf8, (err, data) =&gt; { data.split(os.EOL).forEach(line =&gt; { // do something }); }); HTTP 状态码NodeJS帮我们内置了HTTP状态码及其描述，也就是http.STATUS_CODES，键为状态值，值为描述: 你可以按照如下方法使用: someResponse.code === 301; // true require(http).STATUS_CODES[someResponse.code] === Moved Permanently; // true 避免异常崩溃有时候碰到如下这种导致服务端崩溃的情况还是挺无奈的: const jsonData = getDataFromSomeApi(); // But oh no, bad data! const data = JSON.parse(jsonData); // Loud crashing noise. 我为了避免这种情况，在全局加上了一个: process.on(uncaughtException, console.error); 当然，这种办法绝不是最佳实践，如果是在大型项目中我还是会使用PM2，然后将所有可能崩溃的代码加入到try...catch中。 Just this once()除了on方法，once方法也适用于所有的EventEmitters，希望我不是最后才知道这个的: server.once(request, (req, res) =&gt; res.end(No more from me.)); Custom Console你可以使用new console.Console(standardOut,errorOut)，然后设置自定义的输出流。你可以选择创建console将数据输出到文件或者Socket或者第三方中。 DNS lookup某个年轻人告诉我，Node并不会缓存DNS查询信息，因此你在使用URL之后要等个几毫秒才能获取到数据。不过其实你可以使用dns.lookup()来缓存数据: dns.lookup(www.myApi.com, 4, (err, address) =&gt; { cacheThisForLater(address); }); fs 在不同OS上有一定差异 fs.stats()返回的对象中的mode属性在Windows与其他操作系统中存在差异。 fs.lchmod()仅在macOS中有效。 仅在Windows中支持调用fs.symlink()时使用type参数。 仅仅在macOS与Windows中调用fs.watch()时传入recursive选项。 在Linux与Windows中fs.watch()的回调可以传入某个文件名 使用fs.open()以及a+属性打开某个目录时仅仅在FreeBSD以及Windows上起作用，在macOS以及Linux上则存在问题。 在Linux下以追加模式打开某个文件时，传入到fs.write()的position参数会被忽略。 net 模块差不多比http快上两倍笔者在文档中看到一些关于二者性能的讨论，还特地运行了两个服务器来进行真实比较。结果来看http.Server大概每秒可以接入3400个请求，而net.Server可以接入大概5500个请求。 // This makes two connections, one to a tcp server, one to an http server (both in server.js) // It fires off a bunch of connections and times the response // Both send strings. const net = require(net); const http = require(http); function parseIncomingMessage(res) { return new Promise((resolve) =&gt; { let data = ``; res.on(`data`, (chunk) =&gt; { data += chunk; }); res.on(`end`, () =&gt; resolve(data)); }); } const testLimit = 5000; / —————— / / – NET client – / / —————— / function testNetClient() { const netTest = { startTime: process.hrtime(), responseCount: 0, testCount: 0, payloadData: { type: `millipede`, feet: 100, test: 0, }, }; function handleSocketConnect() { netTest.payloadData.test++; netTest.payloadData.feet++; const payload = JSON.stringify(netTest.payloadData); this.end(payload, `utf8`); } function handleSocketData() { netTest.responseCount++; if (netTest.responseCount === testLimit) { const hrDiff = process.hrtime(netTest.startTime); const elapsedTime = hrDiff[0] * 1e3 + hrDiff[1] / 1e6; const requestsPerSecond = (testLimit / (elapsedTime / 1000)).toLocaleString(); console.info(`net.Server handled an average of ${requestsPerSecond} requests per second.`); } } while (netTest.testCount &lt; testLimit) { netTest.testCount++; const socket = net.connect(8888, handleSocketConnect); socket.on(`data`, handleSocketData); } } / ——————- / / – HTTP client – / / ——————- / function testHttpClient() { const httpTest = { startTime: process.hrtime(), responseCount: 0, testCount: 0, }; const payloadData = { type: `centipede`, feet: 100, test: 0, }; const options = { hostname: `localhost`, port: 8080, method: `POST`, headers: { &apos;Content-Type&apos;: `application/x-www-form-urlencoded`, }, }; function handleResponse(res) { parseIncomingMessage(res).then(() =&gt; { httpTest.responseCount++; if (httpTest.responseCount === testLimit) { const hrDiff = process.hrtime(httpTest.startTime); const elapsedTime = hrDiff[0] * 1e3 + hrDiff[1] / 1e6; const requestsPerSecond = (testLimit / (elapsedTime / 1000)).toLocaleString(); console.info(`http.Server handled an average of ${requestsPerSecond} requests per second.`); } }); } while (httpTest.testCount &lt; testLimit) { httpTest.testCount++; payloadData.test = httpTest.testCount; payloadData.feet++; const payload = JSON.stringify(payloadData); options[`Content-Length`] = Buffer.byteLength(payload); const req = http.request(options, handleResponse); req.end(payload); } } / – Start tests – / // flip these occasionally to ensure there’s no bias based on order setTimeout(() =&gt; { console.info(Starting testNetClient()); testNetClient(); }, 50); setTimeout(() =&gt; { console.info(Starting testHttpClient()); testHttpClient(); }, 2000); // This sets up two servers. A TCP and an HTTP one. // For each response, it parses the received string as JSON, converts that object and returns a string const net = require(net); const http = require(http); function renderAnimalString(jsonString) { const data = JSON.parse(jsonString); return ${data.test}: your are a ${data.type} and you have ${data.feet} feet.; } / —————— / / – NET server – / / —————— / net .createServer((socket) =&gt; { socket.on(`data`, (jsonString) =&gt; { socket.end(renderAnimalString(jsonString)); }); }) .listen(8888); / ——————- / / – HTTP server – / / ——————- / function parseIncomingMessage(res) { return new Promise((resolve) =&gt; { let data = ``; res.on(`data`, (chunk) =&gt; { data += chunk; }); res.on(`end`, () =&gt; resolve(data)); }); } http .createServer() .listen(8080) .on(request, (req, res) =&gt; { parseIncomingMessage(req).then((jsonString) =&gt; { res.end(renderAnimalString(jsonString)); }); }); REPL tricks 如果你是在REPL模式下，就是直接输入node然后进入交互状态的模式。你可以直接输入.load someFile.js然后可以载入包含自定义常量的文件。 可以通过设置NODE_REPL_HISTORY=&quot;&quot;来避免将日志写入到文件中。 _用来记录最后一个计算值。 在REPL启动之后，所有的模块都已经直接加载成功。可以使用os.arch()而不是require(os).arch()来使用。","tags":[{"name":"node.js","slug":"node-js","permalink":"http://yoursite.com/tags/node-js/"}]},{"title":"原生JS","date":"2016-05-18T14:04:59.000Z","path":"2016/05/18/原生JS/","text":"数据类型基本类型值包括： undefined，null，Boolean，Number和String，这些类型分别在内存中占有固定的大小空间，它们的值保存在栈空间，我们通过按值来访问的。引用类型包括：对象、数组、函数等。对于引用类型的值，则必须在堆内存中为这个值分配空间。由于引用类型值的大小不固定（对象有很多属性和方法，而且还可以动态的添加属性和方法），因此不能把他们保存到栈内存中。但内存地址大小是固定的，因此可以将内存地址保存在栈内存中。 简而言之：栈内存中存放的是基本数据类型值，堆内存中存放的是引用类型值，引用类型值在内存中的地址存放在栈中，也就是我们常说的对象对象引用(指针)。 变量复制12345678910111213&lt;script type=&quot;text/javascript&quot;&gt;var a = 5;var b = a;console.log(a+&quot;---&quot;+b);//5---5b = 6;//这里重新给b赋值，a值并没有改变console.log(a+&quot;---&quot;+b);//5---6var obj = &#123;name:&quot;lisi&quot;&#125;;var obj2 = obj;//这里是引用赋值，obj和obj2指向同一个对象console.log(obj.name + &quot;---&quot; + obj2.name);//lisi---lisiobj2.name = &quot;wangwu&quot;;console.log(obj.name + &quot;---&quot; + obj2.name);//wangwu---wangwu&lt;/script&gt;1234567891011121312345678910111213 从上面例子可以看出：在变量复制方面，基本类型和引用类型也有所不同，基本类型复制的是值本身，而引用类型复制的是内存地址。 函数this 的工作原理(5种情况)全局作用域内当在全部作用域内使用 this时，它将会指向全局对象，即window对象 函数调用挡在全局作用域内调用函数时，this 也会指向全局对象。 方法调用this 指向调用该方法的对象。 调用构造函数在构造函数内部，this 指向新创建的对象。 显式的设置this指向当使用call 或者 apply 方法时，函数内的 this 将会被显式设置为函数调用的第一个参数。更详细用法请见之前的博客：传送门 匿名函数在JavaScript里任何匿名函数都是属于window对象。在定义匿名函数时候它会返回自己的内存地址，如果此时有个变量接收了这个内存地址，那么匿名函数就能在程序里被使用了(可以通过在这个变量后面加一对圆括号来调用这个匿名函数)，因为匿名函数也是在全局执行环境构造时候定义和赋值，所以匿名函数的this指向也是window对象。 12345&lt;script type=&quot;text/javascript&quot;&gt;(function()&#123; console.log(this == window);//true&#125;)();&lt;/script&gt;1234512345 参数传递1234567891011&lt;script type=&quot;text/javascript&quot;&gt; function test(num)&#123;//按值传递 num+=5; console.log(num); return num; &#125; var num = 5; var result = test(num); console.log(result);// 10 如果是按引用传递，那么函数里的num会成为类似全局变量，把外面的num覆盖掉 console.log(num);// 5 也就是说，最后应该输出20（这里输出10）&lt;/script&gt;12345678910111234567891011 js中不存在引用传递，如果存在引用传递的话，那么函数内的变量将是全局变量，在外部也可以访问，但这明显是不可能的。再看一个例子： 1234567891011&lt;script type=&quot;text/javascript&quot;&gt;function setName(obj)&#123;//obj = person obj.name = &quot;lisi&quot;; obj = new Object(); obj.name = &quot;wangwu&quot;;&#125;var person = new Object();setName(person);alert(person.name);console.log(obj.name);//Uncaught ReferenceError: obj is not defined&lt;/script&gt;12345678910111234567891011 在将person传递给obj后，其name属性就被设置成了”lisi”。又将obj重新定义了一个对象，另一行代码为该对象定义了一个带有不同值的name属性。如果person是按引用传递的，那么person就会自动被修改为指向其name属性值为”wangwu”的新对象，但事实上并没有，其name属性依然是”lisi”。这就说明：即使在函数内部修改了参数的值，但原始的引用仍然保持不变。实际上，当在函数内重写obj时，这个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁。 执行环境及作用域执行环境执行环境定义了变量或函数有权访问其他数据，可以分为全局执行环境和局部执行环境。全局执行环境是最外层的执行环境，在浏览器中，全局执行环境是window对象，因此，所有的全局变量的函数都是作为window的属性和方法创建的。注意：对于局部执行环境，其内部的代码执行完毕后，该环境将被销毁，保存其中的变量和函数也随之销毁，如果是全局执行环境，需所有程序执行完毕或网页完毕后才会销毁。 需要注意的小细节去掉var的局部变量12345678&lt;script type=&quot;text/javascript&quot;&gt; var name = &quot;wangwu&quot;; function setName()&#123; name = &quot;lisi&quot;;//去掉var变成了全局变量，会覆盖全局中的name &#125; setName(); console.log(name);//lisi&lt;/script&gt;1234567812345678 形参也是局部变量12345678&lt;script type=&quot;text/javascript&quot;&gt; var name = &quot;wangwu&quot;; function setName(name)&#123;//形参也是局部变量 console.log(name); &#125; setName(&quot;￼lisi&quot;);//lisi console.log(name);//wangwu&lt;/script&gt;1234567812345678 作用域当代码在一个环境中执行的时候，就会形成作用域链，它的作用是保证对执行环境中有访问权限的变量和函数进行有序访问（内部深层环境可以访问外层环境，反之不成立），作用域链的前端，就是执行环境的变量对象。详见之前博客：传送门 内存泄漏常见情况javascript具有自动垃圾回收机制，一旦数据不再使用，可以将其设为”null”来释放引用。 循环引用分为两种情况：不同对象之间相互引用和一个经典的例子：一个DOM对象被一个Javascript对象引用，与此同时又引用同一个或其它的Javascript对象，这个DOM对象可能会引发内存泄露。这个DOM对象的引用将不会在脚本停止的时候被垃圾回收器回收。要想破坏循环引用，引用DOM元素的对象或DOM对象的引用需要被赋值为null。 12345678&lt;body&gt;&lt;script type=&quot;text/javascript&quot;&gt;var oBox = document.getElementById(&quot;box&quot;);var obj = &#123;&#125;;oBox.name = obj;obj.age = oBox;//这样就发生了循环引用&lt;/script&gt;&lt;/body&gt;1234567812345678 闭包(常见)通过闭包引用其包含函数的局部变量，当闭包结束后该局部变量无法被垃圾回收机制回收，造成内存泄漏。 DOM泄漏当原有的DOM被移除时，子结点引用没有被移除则无法回收。 123456789101112var select = document.querySelector;var treeRef = select(&apos;#tree&apos;);//在COM树中leafRef是treeFre的一个子结点var leafRef = select(&apos;#leaf&apos;); var body = select(&apos;body&apos;);body.removeChild(treeRef);//#tree不能被回收入，因为treeRef还在//解决方法:treeRef = null;//tree还不能被回收，因为叶子结果leafRef还在leafRef = null;//现在#tree可以被释放了。123456789101112123456789101112 定时器泄漏12345678910111213for (var i = 0; i &lt; 1000; i++) &#123; var obj = &#123; fn: function() &#123; var that = this; var val = setTimeout(function() &#123; that.fn(); &#125;, 500); &#125; &#125; obj.fn(); //虽然你想回收但是timer还在 obj = null;&#125;1234567891011121312345678910111213 垃圾回收标记清除js中最常用的垃圾回收方式就是标记清除。垃圾收集器在运行的时候回给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾收集器完成内存清除工作，消除那些带标记的值并回收它们所占用的内存空间。例如:在函数中声明一个变量，就将这个变量标记为”进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为”离开环境”。 12345function test()&#123; var x = 10 ; //被标记 ，进入环境 var y = 20 ; //被标记 ，进入环境&#125;test(); //执行完毕后 x、y又被标离开环境，被回收。1234512345 引用计数引用计数就是：跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。 123456function test()&#123; var x = &#123;&#125; ; //x的引用次数为0 var y = x ; //x的引用次数加1，为1 var z =x; //x的引用次数再加1，为2 var y =&#123;&#125;; //x的引用次数减1，为1&#125;123456123456 引用计数策略的问题(循环引用)1234567function test() &#123; var a = &#123;&#125;; var b = &#123;&#125;; a.name = b; b.name = a;&#125;test();12345671234567 以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成内存泄露。在IE7与IE8上，内存直线上升。我们知道，IE中有一部分对象并不是原生js对象。例如，其BOM和DOM中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制采用的就是引用计数策略。因此，即使IE的js引擎采用标记清除策略来实现，但js访问的COM对象依然是基于引用计数策略的。换句话说，只要在IE中涉及COM对象，就会存在循环引用的问题。 12345var element = document.getElementById(&quot;some_element&quot;);var myObject = new Object();myObject.element = element;element.someObject = myObject;//产生了循环引用12341234 这个例子在一个DOM元素（element)与一个原生js对象（myObject)之间创建了循环引用。其中，变量myObject有一个名为element的属性指向element对象；而变量element也有一个someObject属性指向myObject。由于存在这个循环引用，即使例子中的DOM从页面中移除，它也永远不会被回收。 12myObject.element = null;element.someObject = null;1212 为了避免类似这样的循环引用问题，最好在不使用它们的时候手工断开原生js对象与DOM元素之间的连接。将变量设置为null意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存。注意：为了解决上述问题，IE9把BOM和DOM对象都转换成了真正的js对象。这样，就避免了两种垃圾收集算法并存导致的问题，也消除了常见的内存泄漏现象。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"详细图解作用域链与闭包","date":"2016-03-18T13:24:03.000Z","path":"2016/03/18/详细图解作用域链与闭包/","text":"攻克闭包难题 初学JavaScript的时候，我在学习闭包上，走了很多弯路。而这次重新回过头来对基础知识进行梳理，要讲清楚闭包，也是一个非常大的挑战。 闭包有多重要？如果你是初入前端的朋友，我没有办法直观的告诉你闭包在实际开发中的无处不在，但是我可以告诉你，前端面试，必问闭包。面试官们常常用对闭包的了解程度来判定面试者的基础水平，保守估计，10个前端面试者，至少5个都死在闭包上。 可是为什么，闭包如此重要，还是有那么多人没有搞清楚呢？是因为大家不愿意学习吗？还真不是，而是我们通过搜索找到的大部分讲解闭包的中文文章，都没有清晰明了的把闭包讲解清楚。要么浅尝辄止，要么高深莫测，要么干脆就直接乱说一通。包括我自己曾经也写过一篇关于闭包的总结，回头一看，不忍直视[捂脸]。 因此本文的目的就在于，能够清晰明了得把闭包说清楚，让读者老爷们看了之后，就把闭包给彻底学会了，而不是似懂非懂。 一、作用域与作用域链 在详细讲解作用域链之前，我默认你已经大概明白了JavaScript中的下面这些重要概念。这些概念将会非常有帮助。 基础数据类型与引用数据类型 内存空间 垃圾回收机制 执行上下文 变量对象与活动对象 如果你暂时还没有明白，可以去看本系列的前三篇文章，本文文末有目录链接。为了讲解闭包，我已经为大家做好了基础知识的铺垫。哈哈，真是好大一出戏。 作用域 在JavaScript中，我们可以将作用域定义为一套规则,这套规则用来管理引擎如何在当前作用域以及嵌套的子作用域中根据标识符名称进行变量查找。 这里的标识符，指的是变量名或者函数名 JavaScript中只有全局作用域与函数作用域(因为eval我们平时开发中几乎不会用到它，这里不讨论)。 作用域与执行上下文是完全不同的两个概念。我知道很多人会混淆他们，但是一定要仔细区分。 JavaScript代码的整个执行过程，分为两个阶段，代码编译阶段与代码执行阶段。编译阶段由编译器完成，将代码翻译成可执行代码，这个阶段作用域规则会确定。执行阶段由引擎完成，主要任务是执行可执行代码，执行上下文在这个阶段创建。 作用域链 回顾一下上一篇文章我们分析的执行上下文的生命周期，如下图。 执行上下文生命周期 我们发现，作用域链是在执行上下文的创建阶段生成的。这个就奇怪了。上面我们刚刚说作用域在编译阶段确定规则，可是为什么作用域链却在执行阶段确定呢？ 之所有有这个疑问，是因为大家对作用域和作用域链有一个误解。我们上面说了，作用域是一套规则，那么作用域链是什么呢？是这套规则的具体实现。所以这就是作用域与作用域链的关系，相信大家都应该明白了吧。 我们知道函数在调用激活时，会开始创建对应的执行上下文，在执行上下文生成的过程中，变量对象，作用域链，以及this的值会分别被确定。之前一篇文章我们详细说明了变量对象，而这里，我们将详细说明作用域链。 作用域链，是由当前环境与上层环境的一系列变量对象组成，它保证了当前执行环境对符合访问权限的变量和函数的有序访问。 为了帮助大家理解作用域链，我我们先结合一个例子，以及相应的图示来说明。 var a = 20; function test() { var b = a + 10; function innerTest() { var c = 10; return b + c; } return innerTest(); } test(); 在上面的例子中，全局，函数test，函数innerTest的执行上下文先后创建。我们设定他们的变量对象分别为VO(global)，VO(test), VO(innerTest)。而innerTest的作用域链，则同时包含了这三个变量对象，所以innerTest的执行上下文可如下表示。 innerTestEC = { VO: {...}, // 变量对象 scopeChain: [VO(innerTest), VO(test), VO(global)], // 作用域链 this: {} } 是的，你没有看错，我们可以直接用一个数组来表示作用域链，数组的第一项scopeChain[0]为作用域链的最前端，而数组的最后一项，为作用域链的最末端，所有的最末端都为全局变量对象。 很多人会误解为当前作用域与上层作用域为包含关系，但其实并不是。以最前端为起点，最末端为终点的单方向通道我认为是更加贴切的形容。如图。 作用域链图示 注意，因为变量对象在执行上下文进入执行阶段时，就变成了活动对象，这一点在上一篇文章中已经讲过，因此图中使用了AO来表示。Active Object 是的，作用域链是由一系列变量对象组成，我们可以在这个单向通道中，查询变量对象中的标识符，这样就可以访问到上一层作用域中的变量了。 二、闭包 对于那些有一点 JavaScript 使用经验但从未真正理解闭包概念的人来说，理解闭包可以看作是某种意义上的重生，突破闭包的瓶颈可以使你功力大增。 闭包与作用域链息息相关； 闭包是在函数执行过程中被确认。 先直截了当的抛出闭包的定义：当函数可以记住并访问所在的作用域(全局作用域除外)时，就产生了闭包，即使函数是在当前作用域之外执行。 简单来说，假设函数A在函数B的内部进行定义了，并且当函数A在执行时，访问了函数B内部的变量对象，那么B就是一个闭包。 非常抱歉之前对于闭包定义的描述有一些不准确，现在已经改过，希望收藏文章的同学再看到的时候能看到吧，对不起大家了。 在基础进阶（一）中，我总结了JavaScript的垃圾回收机制。JavaScript拥有自动的垃圾回收机制，关于垃圾回收机制，有一个重要的行为，那就是，当一个值，在内存中失去引用时，垃圾回收机制会根据特殊的算法找到它，并将其回收，释放内存。 而我们知道，函数的执行上下文，在执行完毕之后，生命周期结束，那么该函数的执行上下文就会失去引用。其占用的内存空间很快就会被垃圾回收器释放。可是闭包的存在，会阻止这一过程。 先来一个简单的例子。 var fn = null; function foo() { var a = 2; function innnerFoo() { console.log(a); } fn = innnerFoo; // 将 innnerFoo的引用，赋值给全局变量中的fn } function bar() { fn(); // 此处的保留的innerFoo的引用 } foo(); bar(); // 2 在上面的例子中，foo()执行完毕之后，按照常理，其执行环境生命周期会结束，所占内存被垃圾收集器释放。但是通过fn = innerFoo，函数innerFoo的引用被保留了下来，复制给了全局变量fn。这个行为，导致了foo的变量对象，也被保留了下来。于是，函数fn在函数bar内部执行时，依然可以访问这个被保留下来的变量对象。所以此刻仍然能够访问到变量a的值。 这样，我们就可以称foo为闭包。 下图展示了闭包fn的作用域链。 闭包fn的作用域链 我们可以在chrome浏览器的开发者工具中查看这段代码运行时产生的函数调用栈与作用域链的生成情况。如下图。 从图中可以看出，chrome浏览器认为闭包是foo，而不是通常我们认为的 innerFoo在上面的图中，红色箭头所指的正是闭包。其中Call Stack为当前的函数调用栈，Scope为当前正在被执行的函数的作用域链，Local为当前的局部变量。 所以，通过闭包，我们可以在其他的执行上下文中，访问到函数的内部变量。比如在上面的例子中，我们在函数bar的执行环境中访问到了函数foo的a变量。个人认为，从应用层面，这是闭包最重要的特性。利用这个特性，我们可以实现很多有意思的东西。 不过读者老爷们需要注意的是，虽然例子中的闭包被保存在了全局变量中，但是闭包的作用域链并不会发生任何改变。在闭包中，能访问到的变量，仍然是作用域链上能够查询到的变量。 对上面的例子稍作修改，如果我们在函数bar中声明一个变量c，并在闭包fn中试图访问该变量，运行结果会抛出错误。 var fn = null; function foo() { var a = 2; function innnerFoo() { console.log(c); // 在这里，试图访问函数bar中的c变量，会抛出错误 console.log(a); } fn = innnerFoo; // 将 innnerFoo的引用，赋值给全局变量中的fn } function bar() { var c = 100; fn(); // 此处的保留的innerFoo的引用 } foo(); bar(); 闭包的应用场景 接下来，我们来总结下，闭包的常用场景。 延迟函数setTimeout 我们知道setTimeout的第一个参数是一个函数，第二个参数则是延迟的时间。在下面例子中， function fn() { console.log(&apos;this is test.&apos;) } var timer = setTimeout(fn, 1000); console.log(timer); 执行上面的代码，变量timer的值，会立即输出出来，表示setTimeout这个函数本身已经执行完毕了。但是一秒钟之后，fn才会被执行。这是为什么？ 按道理来说，既然fn被作为参数传入了setTimeout中，那么fn将会被保存在setTimeout变量对象中，setTimeout执行完毕之后，它的变量对象也就不存在了。可是事实上并不是这样。至少在这一秒钟的事件里，它仍然是存在的。这正是因为闭包。 很显然，这是在函数的内部实现中，setTimeout通过特殊的方式，保留了fn的引用，让setTimeout的变量对象，并没有在其执行完毕后被垃圾收集器回收。因此setTimeout执行结束后一秒，我们任然能够执行fn函数。 柯里化 在函数式编程中，利用闭包能够实现很多炫酷的功能，柯里化算是其中一种。关于柯里化，我会在以后详解函数式编程的时候仔细总结。 模块 在我看来，模块是闭包最强大的一个应用场景。如果你是初学者，对于模块的了解可以暂时不用放在心上，因为理解模块需要更多的基础知识。但是如果你已经有了很多JavaScript的使用经验，在彻底了解了闭包之后，不妨借助本文介绍的作用域链与闭包的思路，重新理一理关于模块的知识。这对于我们理解各种各样的设计模式具有莫大的帮助。 (function () { var a = 10; var b = 20; function add(num1, num2) { var num1 = !!num1 ? num1 : a; var num2 = !!num2 ? num2 : b; return num1 + num2; } window.add = add; })(); add(10, 20); 在上面的例子中，我使用函数自执行的方式，创建了一个模块。方法add被作为一个闭包，对外暴露了一个公共方法。而变量a，b被作为私有变量。在面向对象的开发中，我们常常需要考虑是将变量作为私有变量，还是放在构造函数中的this中，因此理解闭包，以及原型链是一个非常重要的事情。模块十分重要，因此我会在以后的文章专门介绍，这里就暂时不多说啦。 此图中可以观看到当代码执行到add方法时的调用栈与作用域链，此刻的闭包为外层的自执行函数 为了验证自己有没有搞懂作用域链与闭包，这里留下一个经典的思考题，常常也会在面试中被问到。 利用闭包，修改下面的代码，让循环输出的结果依次为1， 2， 3， 4， 5 for (var i=1; i&lt;=5; i++) { setTimeout( function timer() { console.log(i); }, i*1000 ); } 关于作用域链的与闭包我就总结完了，虽然我自认为我是说得非常清晰了，但是我知道理解闭包并不是一件简单的事情，所以如果你有什么问题，可以在评论中问我。你也可以带着从别的地方没有看懂的例子在评论中留言。大家一起学习进步。","tags":[{"name":"闭包 作用域","slug":"闭包-作用域","permalink":"http://yoursite.com/tags/闭包-作用域/"}]},{"title":"闭包","date":"2016-02-08T11:45:20.000Z","path":"2016/02/08/闭包/","text":"什么是闭包？ 简言之，闭包是由函数引用其周边状态（词法环境）绑在一起形成的（封装）组合结构。在 JavaScript 中，闭包在每个函数被创建时形成。 这是基本原理，但为什么我们关心这些？实际上，由于闭包与它的词法环境绑在一起，因此闭包让我们能够从一个函数内部访问其外部函数的作用域。 要使用闭包，只需要简单地将一个函数定义在另一个函数内部，并将它暴露出来。要暴露一个函数，可以将它返回或者传给其他函数。 内部函数将能够访问到外部函数作用域中的变量，即使外部函数已经执行完毕。 闭包使用的例子 闭包的用途之一是实现对象的私有数据。数据私有是让我们能够面向接口编程而不是面向实现编程的基础。而面向接口编程是一个重要的概念，有助于我们创建更加健壮的软件，因为实现细节比接口约定相对来说更加容易被改变。 “面向接口编程，别面向实现编程。” 设计模式：可复用面向对象软件的要素 在 JavaScript 中，闭包是用来实现数据私有的原生机制。当你使用闭包来实现数据私有时，被封装的变量只能在闭包容器函数作用域中使用。你无法绕过对象被授权的方法在外部访问这些数据。在 JavaScript 中，任何定义在闭包作用域下的公开方法才可以访问这些数据。例如： const getSecret = (secret) =&gt; { return { get: () =&gt; secret }; }; test(‘Closure for object privacy.’, assert =&gt; { const msg = ‘.get() should have access to the closure.’; const expected = 1; const obj = getSecret(1); const actual = obj.get(); try { assert.ok(secret, &apos;This throws an error.&apos;); } catch (e) { assert.ok(true, `The secret var is only available to privileged methods.`); } assert.equal(actual, expected, msg); assert.end(); }); 在上面的例子里，get() 方法定义在 getSecret() 作用域下，这让它可以访问任何 getSecret() 中的变量，于是它就是一个被授权的方法。在这个例子里，它可以访问参数 secret。 对象不是唯一的产生私有数据的方式。闭包还可以被用来创建有状态的函数，这些函数的执行过程可能由它们自身的内部状态所决定。例如： const secret = (msg) =&gt; () =&gt; msg; // Secret - creates closures with secret messages. // https://gist.github.com/ericelliott/f6a87bc41de31562d0f9 // https://jsbin.com/hitusu/edit?html,js,output // secret(msg: String) =&gt; getSecret() =&gt; msg: String const secret = (msg) =&gt; () =&gt; msg; test(‘secret’, assert =&gt; { const msg = ‘secret() should return a function that returns the passed secret.’; const theSecret = ‘Closures are easy.’; const mySecret = secret(theSecret); const actual = mySecret(); const expected = theSecret; assert.equal(actual, expected, msg); assert.end(); }); 在函数式编程中，闭包经常用于偏函数应用和柯里化。为了说明这个，我们先定义一些概念： 函数应用：一个过程，指将参数传给一个函数，并获得它的返回值。 偏函数应用：一个过程，它传给某个函数其中一部分参数，然后返回一个新的函数，该函数等待接受后续参数。换句话说，偏函数应用是一个函数，它接受另一个函数为参数，这个作为参数的函数本身接受多个参数，它返回一个函数，这个函数与它的参数函数相比，接受更少的参数。偏函数应用提前赋予一部分参数，而返回的函数则等待调用时传入剩余的参数。 偏函数应用通过闭包作用域来提前赋予参数。你可以实现一个通用的函数来赋予指定的函数部分参数，它看起来如下： partialApply(targetFunction: Function, …fixedArgs: Any[]) =&gt; functionWithFewerParams(…remainingArgs: Any[]) 如果你要更进一步理解上面的形式，你可以看这里（https://github.com/ericelliott/rtype#reading-function-signatures）。 partialApply 接受一个多参数的函数，以及一串我们想要提前赋给这个函数的参数，它返回一个新的函数，这个函数将接受剩余的参数。 下面给一个例子来说明，假设你有一个函数，求两个数的和： const add = (a, b) =&gt; a + b; 现在你想要得到一个函数，它能够对任何传给它的参数都加 10，我们可以将它命名为add10()。add10(5) 的结果应该是 15。我们的 partialApply() 函数可以做到这个： const add10 = partialApply(add, 10); add10(5); 在这个例子里，参数 10 通过闭包作用域被提前赋予 add()，从而让我们获得 add10()。 现在让我们看一下如何实现 partialApply()： // Generic Partial Application Function // https://jsbin.com/biyupu/edit?html,js,output // https://gist.github.com/ericelliott/f0a8fd662111ea2f569e // partialApply(targetFunction: Function, …fixedArgs: Any[]) =&gt; // functionWithFewerParams(…remainingArgs: Any[]) const partialApply = (fn, …fixedArgs) =&gt; { return function (…remainingArgs) { return fn.apply(this, fixedArgs.concat(remainingArgs)); }; }; test(‘add10’, assert =&gt; { const msg = ‘partialApply() should partially apply functions’ const add = (a, b) =&gt; a + b; const add10 = partialApply(add, 10); const actual = add10(5); const expected = 15; assert.equal(actual, expected, msg); }); 如你所见，它只是简单地返回一个函数，这个函数通过闭包访问了传给 partialApply() 函数的fixedArgs 参数。 说了半天，究竟什么是闭包呢？ 闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。 闭包就是就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配。 当在一个函数内定义另外一个函数就会产生闭包。 为了便于理解，我们可以简单的将闭包理解为： 闭包：是指有权访问另外一个函数作用域中的变量的函数。 JavaScript中的作用域 JavaScript中是没有块级作用域的。不过关于块级作用域我们在这里不做深入探究，笔者在JavaScript的作用域和块级作用域概念理解中有对块级作用域较为详细的解释，不懂的读者可以去看看。 变量的作用域无非就是两种：全局变量和局部变量。 Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。 var n=999; function f1(){ alert(n); } f1(); // 999 如上函数，f1可调用全局变量n 另一方面，在函数外部自然无法读取函数内的局部变量。 function f1(){ var n=999; } alert(n); // error 这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量。 function f1(){ n=999; } f1(); alert(n); // 999 闭包 1.理解闭包 我们已经理解了什么是作用域，什么是块级作用域，那又该如何去访问函数内部的变量呢？ 出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。 function f1(){ var n=999; function f2(){ alert(n); } return f2; } var result=f1(); result();// 弹出999 上面函数中的f2函数就是闭包，就是通过建立函数来访问函数内部的局部变量。 2.闭包的用途 闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。 function f1(){ var n=999; nAdd=function(){n+=1} function f2(){ alert(n); } return f2; } var result=f1(); result(); // 999 nAdd(); result(); // 1000 在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。 为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。 这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。 3.闭包的注意点 1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。 4.经典闭包小案例 如果你能理解下面全部的案例，那你的闭包就算是真正掌握了。 var name = “The Window”; var object = { name : “My Object”, getNameFunc : function(){ return function(){ return this.name; }; } }; alert(object.getNameFunc()());//The Window var name = “The Window”; var object = { name : “My Object”, getNameFunc : function(){ var that = this; return function(){ return that.name; }; } }; alert(object.getNameFunc()());//My Object function fun(n,o) { console.log(o) return { fun:function(m){ return fun(m,n); } }; } var a = fun(0); a.fun(1); a.fun(2); a.fun(3);//undefined,?,?,? var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,? var c = fun(0).fun(1); c.fun(2); c.fun(3);//undefined,?,?,? //问:三行a,b,c的输出分别是什么？ 这是一道非常典型的JS闭包问题。其中嵌套了三层fun函数，搞清楚每层fun的函数是那个fun函数尤为重要。 //答案： //a: undefined,0,0,0 //b: undefined,0,1,2 //c: undefined,0,1,1","tags":[{"name":"闭包","slug":"闭包","permalink":"http://yoursite.com/tags/闭包/"}]}]